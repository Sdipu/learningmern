const express = require('express'); //express connection 
const { dirname } = require('path');
const app = express()// expres use
var bodyParser = require('body-parser')// taking input 
require('dotenv').config()

const port = 3000
app.use(bodyParser.urlencoded({extended:true}))
app.use(express.static("public"));// connecting css to server
var encrypt = require('mongoose-encryption');


const mongoose = require('mongoose');// require mongoose
const { stringify } = require('querystring');
mongoose.connect('mongodb://localhost:27017/register', {useNewUrlParser: true, useUnifiedTopology: true});

app.set('view engine', 'ejs');


// model make
var userSchema = new mongoose.Schema({
  email: String ,
   pswd: String ,
   name : String
});
userSchema.plugin(encrypt, { secret: process.env.Secret,encryptedFields: ['pswd']  });



const user = mongoose.model('user',userSchema );


//find model
////user.find({},function(err,name){
 // console.log(name);
//})






app.get('/', (req, res) => {
  res.render("login")

});





app.get('/about', (req, res) => {
  res.render("about")
  });
  app.get('/home', (req, res) => {
    res.render("home")
  })
  app.get('/register', (req, res) => {
    res.render("register")
  })
  app.get('/civil', (req, res) => {
    res.render("result")
  })
  app.get('/computer', (req, res) => {
    res.render("computer")
  })
    app.get('/electronics', (req, res) => {
      res.render("electronics")
  })



  app.post('/register',(req,res)=>{
   
const newuser =new user ( {
  email: req.body.email,
  pswd : req.body.pswd,
  name : req.body.username

})
newuser.save(function(err){
  if(err) console.log(error);
  else res.render("home")
})



  })
  app.post('/',(req,res)=>{
   const flag =0;
        var num11 =req.body.num1;
        var pswdt = req.body.num2;
      
        
        user.findOne({email: num11},function(err,founduser){
          if(err) console.log(err)
          else
          if(founduser){
          if(founduser.pswd===pswdt)
          res.render('home');
        else res.redirect("/")
      }
          else
          res.redirect("/")


        })

         

        
    
      })

app.listen(port, () => {
  console.log(`Example app listening at http://localhost:${port}`)
})








make.env file 
Secret=littlesecret.
API_KEY =alwdaefnfnmcmm




make .gitignorefile
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*











dependency use by me
{
  "name": "ed",
  "version": "1.0.0",
  "description": "",
  "main": "server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "body-parser": "^1.19.0",
    "dotenv": "^8.2.0",
    "ejs": "^3.1.5",
    "express": "^4.17.1",
    "mongoose": "^5.10.9",
    "mongoose-encryption": "^2.0.2"
  }
}
